{"version":3,"sources":["GeneralRelativityComponent.js","QuantumFieldComponent.js","CosmologicalComponent.js","ElectromagneticComponent.js","StatisticalMechanicsComponent.js","App.js","index.js"],"names":["GeneralRelativityComponent","metricTensor","setMetricTensor","useState","_jsxs","children","_jsx","type","value","onChange","e","target","onClick","updateMetricTensor","fetch","method","headers","body","JSON","stringify","metric_tensor","then","response","json","data","console","log","catch","error","QuantumFieldComponent","scalarField","setScalarField","updateScalarField","scalar_field","CosmologicalComponent","density","setDensity","updateDensity","ElectromagneticComponent","fieldTensor","setFieldTensor","updateFieldTensor","field_tensor","StatisticalMechanicsComponent","densityMatrix","setDensityMatrix","updateDensityMatrix","density_matrix","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ede985a2.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction GeneralRelativityComponent() {\n  const [metricTensor, setMetricTensor] = useState('');\n\n  const updateMetricTensor = () => {\n    fetch('http://localhost:5000/general_relativity/update_metric_tensor', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ metric_tensor: metricTensor }),\n    }).then(response => response.json())\n      .then(data => console.log(data))\n      .catch(error => console.error('Error:', error));\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={metricTensor} onChange={e => setMetricTensor(e.target.value)} />\n      <button onClick={updateMetricTensor}>Update Metric Tensor</button>\n    </div>\n  );\n}\n\nexport default GeneralRelativityComponent;\n","import React, { useState } from 'react';\n\nfunction QuantumFieldComponent() {\n  const [scalarField, setScalarField] = useState('');\n\n  const updateScalarField = () => {\n    fetch('http://localhost:5000/quantum_field/update_scalar_field', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ scalar_field: scalarField }),\n    }).then(response => response.json())\n      .then(data => console.log(data))\n      .catch(error => console.error('Error:', error));\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={scalarField} onChange={e => setScalarField(e.target.value)} />\n      <button onClick={updateScalarField}>Update Scalar Field</button>\n    </div>\n  );\n}\n\nexport default QuantumFieldComponent;\n","import React, { useState } from 'react';\n\nfunction CosmologicalComponent() {\n  const [density, setDensity] = useState('');\n\n  const updateDensity = () => {\n    fetch('http://localhost:5000/cosmological/update_density', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ density: density }),\n    }).then(response => response.json())\n      .then(data => console.log(data))\n      .catch(error => console.error('Error:', error));\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={density} onChange={e => setDensity(e.target.value)} />\n      <button onClick={updateDensity}>Update Density</button>\n    </div>\n  );\n}\n\nexport default CosmologicalComponent;\n","import React, { useState } from 'react';\n\nfunction ElectromagneticComponent() {\n  const [fieldTensor, setFieldTensor] = useState('');\n\n  const updateFieldTensor = () => {\n    fetch('http://localhost:5000/electromagnetic/update_field_tensor', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ field_tensor: fieldTensor }),\n    }).then(response => response.json())\n      .then(data => console.log(data))\n      .catch(error => console.error('Error:', error));\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={fieldTensor} onChange={e => setFieldTensor(e.target.value)} />\n      <button onClick={updateFieldTensor}>Update Field Tensor</button>\n    </div>\n  );\n}\n\nexport default ElectromagneticComponent;\n","import React, { useState } from 'react';\n\nfunction StatisticalMechanicsComponent() {\n  const [densityMatrix, setDensityMatrix] = useState('');\n\n  const updateDensityMatrix = () => {\n    fetch('http://localhost:5000/statistical_mechanics/update_density_matrix', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ density_matrix: densityMatrix }),\n    }).then(response => response.json())\n      .then(data => console.log(data))\n      .catch(error => console.error('Error:', error));\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={densityMatrix} onChange={e => setDensityMatrix(e.target.value)} />\n      <button onClick={updateDensityMatrix}>Update Density Matrix</button>\n    </div>\n  );\n}\n\nexport default StatisticalMechanicsComponent;\n","import React from 'react';\nimport GeneralRelativityComponent from './GeneralRelativityComponent';\nimport QuantumFieldComponent from './QuantumFieldComponent';\nimport CosmologicalComponent from './CosmologicalComponent';\nimport ElectromagneticComponent from './ElectromagneticComponent';\nimport StatisticalMechanicsComponent from './StatisticalMechanicsComponent';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Unified Theory Dashboard</h1>\n      <GeneralRelativityComponent />\n      <QuantumFieldComponent />\n      <CosmologicalComponent />\n      <ElectromagneticComponent />\n      <StatisticalMechanicsComponent />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}